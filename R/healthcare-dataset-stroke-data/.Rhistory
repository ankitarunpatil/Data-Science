summary(smoke1)
toBeRemoved<-which(smoke_data$smoking_status=="")
droplevels(smoke_data[-toBeRemoved, ])
summary(smoke1)
summary(smoke_data$smoking_status)
smoke_data = train_data[ train_data$id %in% train_data$id & train_data$smoking_status != "", ]
toBeRemoved<-which(smoke_data$smoking_status=="")
droplevels(smoke_data[-toBeRemoved, ])
summary(smoke_data$smoking_status)
smoke2=subset(smoke_data, smoking_status != "")
summary(smoke2)
smoke2=subset(smoke_data, smoking_status == "")
summary(smoke2)
train_data = read.csv("train_2v.csv",header=T)
#Check if there are any missing values in the columns
na_count=sapply(train_data, function(y) sum(length(which(is.na(y)))))
na_count=data.frame(na_count)
na_count
str(train_data)
summary(train_data)
#We find that there are 11 missing values for the TotalCharges column
#Replace those missing valyes with the mean value
train_data$bmi=ifelse(is.na(train_data$bmi),ave(train_data$bmi,FUN = function(x) mean(x,na.rm = TRUE)),train_data$bmi)
sum(is.na(train_data))
smoke_data = train_data[ train_data$id %in% train_data$id & train_data$smoking_status != "", ]
toBeRemoved<-which(smoke_data$smoking_status=="")
smoke_data<-smoke_data[-toBeRemoved,]
summary(smoke_data)
train_data = read.csv("train_2v.csv",header=T)
#Check if there are any missing values in the columns
na_count=sapply(train_data, function(y) sum(length(which(is.na(y)))))
na_count=data.frame(na_count)
na_count
str(train_data)
summary(train_data)
#We find that there are 11 missing values for the TotalCharges column
#Replace those missing valyes with the mean value
train_data$bmi=ifelse(is.na(train_data$bmi),ave(train_data$bmi,FUN = function(x) mean(x,na.rm = TRUE)),train_data$bmi)
sum(is.na(train_data))
smoke_data = train_data[ train_data$id %in% train_data$id & train_data$smoking_status != "", ]
train_data = read.csv("train_2v.csv",header=T)
#Check if there are any missing values in the columns
na_count=sapply(train_data, function(y) sum(length(which(is.na(y)))))
na_count=data.frame(na_count)
na_count
str(train_data)
summary(train_data)
#We find that there are 11 missing values for the TotalCharges column
#Replace those missing valyes with the mean value
train_data$bmi=ifelse(is.na(train_data$bmi),ave(train_data$bmi,FUN = function(x) mean(x,na.rm = TRUE)),train_data$bmi)
str(train_data)
sum(is.na(train_data))
smoke_data = train_data[ train_data$id %in% train_data$id & train_data$smoking_status != "", ]
str(smoke_data)
na.omit(smoke_data$smoking_status)
#Removing the customer ID column as we do not need the same for prediction of
smoke_data=smoke_data[ , -which(names(smoke_data) %in% c("id"))]
head(smoke_data)
#yes no conversion for visualisation
smoke_data$hypertension=as.factor(ifelse(smoke_data$hypertension==1, 'YES', 'NO'))
summary(smoke_data$hypertension)
smoke_data$heart_disease=as.factor(ifelse(smoke_data$heart_disease==1, 'YES', 'NO'))
summary(smoke_data$heart_disease)
smoke_data$stroke=as.factor(ifelse(smoke_data$stroke==1, 'YES', 'NO'))
summary(smoke_data$stroke)
head(smoke_data)
#Drawing bar plots
countgender=table(smoke_data$gender,smoke_data$stroke)
barplot(countgender, main="Gender vs STroke", xlab="STroke Yes or No", col=c("darkblue","red"),legend=rownames(countgender))
#Plot for TotalCharges
ggplot(bmi, aes(y= bmi, x = "", fill = Stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
#Plot for TotalCharges
ggplot(smoke_data, aes(y= bmi, x = "", fill = stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
#Install packages
install.packages("tidyverse")
install.packages("MASS")
install.packages("car")
install.packages("e1071")
install.packages("caret")
install.packages("cowplot")
install.packages("caTools")
install.packages("pROC")
install.packages("ggcorrplot")
#install.packages("ggplot2") --In tidyverse
install.packages("class")
install.packages("Hmisc")
install.packages("sjPlot")
install.packages("PRROC")
#Library
#Libraries
library(tidyverse)
library(MASS)
library(car)
library(e1071)
library(caret)
library(cowplot)
library(caTools)
library(pROC)
library(ggcorrplot)
#library(ggplot2)
library(dummies)
library(plyr)
library(dplyr)
library(class)
library(Hmisc)
library(sjPlot)
library(PRROC)
library(klaR)
#Plot for TotalCharges
ggplot(smoke_data, aes(y= bmi, x = "", fill = stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
install.packages(c("klaR", "tidyverse"))
install.packages(c("klaR", "tidyverse"))
#Plot for TotalCharges
ggplot(smoke_data, aes(y= bmi, x = "", fill = stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
install.packages("tidyverse")
install.packages("tidyverse")
#Plot for bmi
ggplot(smoke_data, aes(y= bmi, x = "", fill = stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
smoke_data[which(smoke_data$bmi %in% outliers),]
outliers <- boxplot(smoke_data$bmi, plot=FALSE)$out
print(outliers)
smoke_data[which(smoke_data$bmi %in% outliers),]
#Plot for bmi
ggplot(smoke_data, aes(y= bmi, x = "", fill = stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
boxplot(smoke_data$bmi)
train_data = read.csv("train_2v.csv",header=T)
#Check if there are any missing values in the columns
na_count=sapply(train_data, function(y) sum(length(which(is.na(y)))))
na_count=data.frame(na_count)
na_count
str(train_data)
summary(train_data)
#We find that there are 11 missing values for the TotalCharges column
#Replace those missing valyes with the mean value
train_data$bmi=ifelse(is.na(train_data$bmi),ave(train_data$bmi,FUN = function(x) mean(x,na.rm = TRUE)),train_data$bmi)
str(train_data)
sum(is.na(train_data))
smoke_data = train_data[ train_data$id %in% train_data$id & train_data$smoking_status != "", ]
str(smoke_data)
na.omit(smoke_data$smoking_status)
#Removing the customer ID column as we do not need the same for prediction of
smoke_data=smoke_data[ , -which(names(smoke_data) %in% c("id"))]
head(smoke_data)
#yes no conversion for visualisation
smoke_data$hypertension=as.factor(ifelse(smoke_data$hypertension==1, 'YES', 'NO'))
summary(smoke_data$hypertension)
smoke_data$heart_disease=as.factor(ifelse(smoke_data$heart_disease==1, 'YES', 'NO'))
summary(smoke_data$heart_disease)
smoke_data$stroke=as.factor(ifelse(smoke_data$stroke==1, 'YES', 'NO'))
summary(smoke_data$stroke)
head(smoke_data)
#Drawing bar plots
countgender=table(smoke_data$gender,smoke_data$stroke)
barplot(countgender, main="Gender vs STroke", xlab="STroke Yes or No", col=c("darkblue","red"),legend=rownames(countgender))
#Plot for bmi
ggplot(smoke_data, aes(y= bmi, x = "", fill = stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
ggplot(smoke_data, aes(y= avg_glucose_level, x = "", fill = stroke)) +
geom_boxplot()+
theme_bw()+
xlab(" ")
head(smoke_data)
smoke_num = smoke_data[,c(2,8,9)]
head(smoke_num)
#Normalization function
norm=function(n) {
return((n-min(n))/(max(n)-min(n)))
}
#normalize
smoke_num$age=norm(smoke_num$age)
smoke_num$avg_glucose_level = norm(smoke_num$avg_glucose_level)
smoke_num$bmi=norm(smoke_num$bmi)
head(smoke_num)
smoke_cat = smoke_data[,-c(2,8,9)]
head(smoke_cat)
smoke_cat=data.frame(sapply(smoke_cat,function(x) data.frame(model.matrix(~x-1,data =smoke_cat))[,-1]))
head(smoke_cat)
smoke_final = cbind(smoke_num,smoke_cat)
head(smoke_final)
#Logistic regression
model_log = glm(stroke ~., data = smoke_final,family="binomial")
summary(model_log)
test_data =read.csv("test_2v.csv",header=T)
test_data =read.csv("test_2v.csv",header=T)
#Divide the data we have into training and test
all_smoke_data = sample(1:nrow(smoke_data),0.7*nrow(smoke_data))
train.smoke_data=smoke_data[all_smoke_data,]
test.smoke_data=smoke_data[-all_smoke_data,]
#Build the first model using all variables(logistic)
model1 = glm(smoke_data ~ ., data = train.smoke_data, family = "binomial")
#Build the first model using all variables(logistic)
model1 = glm(all_smoke_data ~ ., data = train.smoke_data, family = "binomial")
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = train.smoke_data, family = "binomial")
#Build the first model using all variables(logistic)
model1 = lm(stroke ~ ., data = train.smoke_data, family = "binomial")
head(all_smoke_data)
#Divide the data we have into training and test
select.data = sample(1:nrow(smoke_final),0.7*nrow(smoke_final))
train.smoke_data=smoke_final[select.data,]
test.smoke_data=smoke_fianl[-select.data,]
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = train.smoke_data, family = "binomial")
summary(model_1)
summary(model1)
pred <- predict(model1, type = "response", newdata = test.smoke_data)
test.smoke_data=smoke_final[-select.data,]
pred <- predict(model1, type = "response", newdata = test.smoke_data)
summary(pred)
test.smoke_data$stroke <- pred
test.smoke_data$stroke_pred <- pred
table(train.smoke_data$stroke,test.smoke_data$stroke_pred)
confusionMatrix(test.smoke_data$stroke_pred,test.smoke_data$stroke)
confusionMatrix(test.smoke_data$stroke_pred,test.smoke_data$stroke)
#confusion matrix needs factors as data
test.smoke_data$stroke_pred=as.factor(ifelse(test.smoke_data$stroke_pred==1, 'YES', 'NO'))
test.smoke_data$stroke =as.factor(ifelse(test.smoke_data$stroke==1, 'YES', 'NO'))
confusionMatrix(test.smoke_data$stroke_pred,test.smoke_data$stroke)
confusionMatrix(test.smoke_data$stroke_pred,test.smoke_data$stroke)
#confusion matrix needs factors as data
ank$pred=as.factor(ifelse(ank$pred==1, 'YES', 'NO'))
pred <- predict(model1, type = "response", newdata = test.smoke_data)
summary(pred)
ank$pred <- pred
#Divide the data we have into training and test
select.data = sample(1:nrow(smoke_final),0.7*nrow(smoke_final))
train.smoke_data=smoke_final[select.data,]
test.smoke_data=smoke_final[-select.data,]
head(all_smoke_data)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = train.smoke_data, family = "binomial")
#Divide the data we have into training and test
select.data = sample(1:nrow(smoke_final),0.7*nrow(smoke_final))
smoke_train=smoke_final[select.data,]
smoke_test=smoke_final[-select.data,]
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = "binomial")
summary(model1)
pred <- predict(model1, type = "response", newdata = smoke_test)
summary(pred)
smoke_test$pred <- pred
#confusion matrix needs factors as data
smoke_test$pred=as.factor(ifelse(smoke_test$pred==1, 'YES', 'NO'))
smoke_test$stroke =as.factor(ifelse(smoke_test$stroke==1, 'YES', 'NO'))
confusionMatrix(smoke_test$pred,smoke_test$stroke)
confusionMatrix(smoke_test$pred,smoke_train$stroke)
smoke_train$stroke =as.factor(ifelse(smoke_test$stroke==1, 'YES', 'NO'))
confusionMatrix(smoke_test$pred,smoke_train$stroke)
confusionMatrix(smoke_test$pred,smoke_test$stroke)
pred <- predict(model1, type = "response", newdata = smoke_test)
pred
summary(pred)
pred <- predict(model1,smoke_test)
smoke_test$pred <- pred
confusionMatrix(smoke_test$pred,smoke_test$stroke)
smoke_test$stroke
smoke_test$pred
pred_smoke <- factor(ifelse(pred >= 0.50, "Yes", "No"))
actual_smoke <- factor(ifelse(test.smoke_data$stroke==1,"Yes","No"))
table(actual_churn,pred_churn)
table(actual_smoke,pred_smoke)
confusionMatrix(actual_smoke,pred_smoke)
confusionMatrix(smoke_test$pred,smoke_test$stroke)
smoke_test$pred
smoke_test$stroke
#Confusion
confusionMatrix(model1)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = "binomial")
stroke
stroke_train
summary(stroke_train)
summary(smoke_train)
summary(smoke_train$stroke)
#preprocessing the output variable
smoke_train$smoke=as.factor(ifelse(smoke_test$smoke==1, 'YES', 'NO'))
#preprocessing the output variable
smoke_train$smoke=as.factor(ifelse(smoke_train$smoke==1, 'YES', 'NO'))
#preprocessing the output variable
head(smoke_train)
smoke_train$smoke=as.factor(ifelse(smoke_train$smoke==1, 'YES', 'NO'))
summary(smoke_train$smoke)
smoke_train$stroke=as.factor(ifelse(smoke_train$stroke==1, 'YES', 'NO'))
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = "binomial")
smoke_train$stroke=as.factor(ifelse(smoke_train$stroke==1, 'YES', 'NO'))
summary(smoke_train$smoke)
summary(smoke_train$stroke)
train_data = read.csv("train_2v.csv",header=T)
#Check if there are any missing values in the columns
na_count=sapply(train_data, function(y) sum(length(which(is.na(y)))))
na_count=data.frame(na_count)
na_count
str(train_data)
summary(train_data$stroke)
str(train_data$stroke)
#We find that there are 11 missing values for the TotalCharges column
#Replace those missing valyes with the mean value
train_data$bmi=ifelse(is.na(train_data$bmi),ave(train_data$bmi,FUN = function(x) mean(x,na.rm = TRUE)),train_data$bmi)
str(train_data)
sum(is.na(train_data))
smoke_data = train_data[ train_data$id %in% train_data$id & train_data$smoking_status != "", ]
str(smoke_data)
na.omit(smoke_data$smoking_status)
#Removing the customer ID column as we do not need the same for prediction of
smoke_data=smoke_data[ , -which(names(smoke_data) %in% c("id"))]
head(smoke_data)
#yes no conversion for visualisation
smoke_data$hypertension=as.factor(ifelse(smoke_data$hypertension==1, 'YES', 'NO'))
summary(smoke_data$hypertension)
smoke_data$heart_disease=as.factor(ifelse(smoke_data$heart_disease==1, 'YES', 'NO'))
summary(smoke_data$heart_disease)
smoke_data$stroke=as.factor(ifelse(smoke_data$stroke==1, 'YES', 'NO'))
summary(smoke_data$stroke)
head(smoke_data)
summary(smoke_data$stroke)
head(smoke_data)
smoke_num = smoke_data[,c(2,8,9)]
head(smoke_num)
#Normalization function
norm=function(n) {
return((n-min(n))/(max(n)-min(n)))
}
#normalize
smoke_num$age=norm(smoke_num$age)
smoke_num$avg_glucose_level = norm(smoke_num$avg_glucose_level)
smoke_num$bmi=norm(smoke_num$bmi)
head(smoke_num)
smoke_cat = smoke_data[,-c(2,8,9)]
head(smoke_cat)
smoke_cat=data.frame(sapply(smoke_cat,function(x) data.frame(model.matrix(~x-1,data =smoke_cat))[,-1]))
head(smoke_cat)
smoke_final = cbind(smoke_num,smoke_cat)
head(smoke_final)
summary(smoke_final$stroke)
#Removing the customer ID column as we do not need the same for prediction of
smoke_final=smoke_final[ , -which(names(smoke_final) %in% c(""))]
head(smoke_data)
summary(smoke_final$stroke)
smoke_final = cbind(smoke_num,smoke_cat)
head(smoke_final)
summary(smoke_data$stroke)
summary(smoke_final$stroke)
-----
#-------------------Nor sure what this is doing-----------------#
#Removing the customer ID column as we do not need the same for prediction of
#smoke_final=smoke_final[ , -which(names(smoke_final) %in% c(""))]
#head(smoke_data)
# Hold out, splitting data into test and train
#Divide the data we have into training and test
select.data = sample(1:nrow(smoke_final),0.7*nrow(smoke_final))
summary(smoke_final$stroke)
-----
#-------------------Nor sure what this is doing-----------------#
#Removing the customer ID column as we do not need the same for prediction of
#smoke_final=smoke_final[ , -which(names(smoke_final) %in% c(""))]
#head(smoke_data)
#change the output variable to yes and no
smoke_final$stroke=as.factor(ifelse(smoke_final$stroke==1, 'YES', 'NO'))
-----
#-------------------Nor sure what this is doing-----------------#
#Removing the customer ID column as we do not need the same for prediction of
#smoke_final=smoke_final[ , -which(names(smoke_final) %in% c(""))]
#head(smoke_data)
#change the output variable to yes and no
smoke_final$stroke=as.factor(ifelse(smoke_final$stroke==1, 'YES', 'NO'))
summary(smoke_final$stroke)
smoke_final$stroke=as.factor(ifelse(smoke_final$stroke==1, 'YES', 'NO'))
summary(smoke_final$stroke)
#Divide the data we have into training and test
select.data = sample(1:nrow(smoke_final),0.7*nrow(smoke_final))
smoke_train=smoke_final[select.data,]
smoke_test=smoke_final[-select.data,]
head(all_smoke_data)
#preprocessing the output variable
head(smoke_train)
smoke_train1=smoke_train
smoke_train$stroke=as.factor(ifelse(smoke_train$stroke==1, 'YES', 'NO'))
summary(smoke_train$stroke)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = "binomial")
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = "binomial")
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial())
summary(model1)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial(logit)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial(logit))
summary(model1)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial(logit))
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial())
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial("logit"))
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial("logit"),maxit=100)
#Divide the data we have into training and test
select.data = sample(1:nrow(smoke_final),0.7*nrow(smoke_final))
smoke_train=smoke_final[select.data,]
smoke_test=smoke_final[-select.data,]
head(all_smoke_data)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial("logit"),maxit=100)
accuracy(smoke_test,model1)
install.packages("matrix")
library(matrix)
library(matrix)
install.packages("metrics")
install.packages("Metrics")
library(Metrics)
accuracy(smoke_test,model1)
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial("logit"),maxit=100)
summary(model1)
# A 3-nearest neighbours model with no normalization
nn3 <- kNN(Species ~ .,smoke_train,smoke_test,norm=TRUE,k=20)
install.packages("class")
install.packages("class")
#Library
#Libraries
library(class)
# A 3-nearest neighbours model with no normalization
nn3 <- kNN(Species ~ .,smoke_train,smoke_test,norm=TRUE,k=20)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(Species ~ .,smoke_train,smoke_test,norm=TRUE,k=20)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(Species ~ .,smoke_train,smoke_test,norm=FALSE,k=20)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(Species ~ .,smoke_train,smoke_test,k=20)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(Species ~ .,smoke_train,smoke_test,norm=TRUE,k=20)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(Species ~ .,smoke_train,smoke_test,cl=stroke,k=20)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(train = smoke_train, test = smoke_test,cl = stroke, k=10)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(train = smoke_train, test = smoke_test,cl = smoke_test$stroke, k=10)
# A 3-nearest neighbours model with no normalization
nn3 <- knn(train = smoke_train, test = smoke_test,cl = smoke_final$stroke, k=10)
nn3 <- knn(stroke ~ .,smoke_train,smoke_test,norm=FALSE,k=3)
head(smoke_test)
test -> 1:100
#test -> 1:100
train.smoke_data <-smoke_data.subset[-smoke_test,]
head(all_smoke_data)
head(smoke_train)
head(smoke_test)
m1<-knn(train=smoke_train, test=smoke_test, c1=stroke, k=13)
m1<-knn(train=smoke_train, test=smoke_test, c1=smoke_train$stroke, k=13)
m1<-knn(train=smoke_train, test=smoke_test, smoke_train$stroke, k=13)
m1<-knn(train=smoke_train, test=smoke_test, cl=smoke_train$stroke, k=13)
sum(is.na(smoke_test))
sum(is.na(smoke_train))
summary(smoke_test)
str(smoke_train)
str(smoke_test)
smoke_test$stroke=as.numeric(ifelse(smoke_test$stroke=='YES', 1, 0))
smoke_train$stroke=as.numeric(ifelse(smoke_train$stroke=='YES', 1, 0))
m1<-knn(train=smoke_train, test=smoke_test, cl=smoke_train$stroke, k=13)
m1
summary(m1)
confusionMatrix(table(m1 ,smoke_test))
confusionMatrix(table(m1 ,smoke_test$stroke))
#Divide the data we have into training and test
select.data = sample(1:nrow(smoke_final),0.7*nrow(smoke_final))
smoke_train=smoke_final[select.data,]
smoke_test=smoke_final[-select.data,]
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial("logit"),maxit=100)
summary(model1)
pred <- predict(model1,smoke_test)
predi = predict(model1, type="response", smoke_test)
#table(train.smoke_data$stroke,test.smoke_data$stroke_pred)
predi
summary(predi)
#confusion matrix needs factors as data
smoke_test$predi=as.factor(ifelse(smoke_test$predi==1, 'YES', 'NO'))
smoke_test$stroke =as.factor(ifelse(smoke_test$stroke==1, 'YES', 'NO'))
#confusion matrix needs factors as data
smoke_test$predi=as.factor(ifelse(smoke_test$predi==1, 'YES', 'NO'))
smoke_test$predi = predict(model1, type="response", smoke_test)
predi = predict(model1, type="response", smoke_test)
pred <- predict(model1,smoke_test)
probabilities <- model %>% predict(smoke_test, type = "response")
probabilities <- model1 %>% predict(smoke_test, type = "response")
#Build the first model using all variables(logistic)
model1 = glm(stroke ~ ., data = smoke_train, family = binomial("logit"),maxit=100)
summary(model1)
smoke_final.prob <- model1 %>% predict(smoke_test, type = "response")
